[
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "idle",
        "importPath": "hydrogram",
        "description": "hydrogram",
        "isExtraImport": true,
        "detail": "hydrogram",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "hydrogram.enums",
        "description": "hydrogram.enums",
        "isExtraImport": true,
        "detail": "hydrogram.enums",
        "documentation": {}
    },
    {
        "label": "google_api",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "google_api",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "neon_url",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "neon_url",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "api_id",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "api_hash",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "bot_token",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "EasyGoogleTranslate",
        "importPath": "easygoogletranslate",
        "description": "easygoogletranslate",
        "isExtraImport": true,
        "detail": "easygoogletranslate",
        "documentation": {}
    },
    {
        "label": "detect",
        "importPath": "langdetect",
        "description": "langdetect",
        "isExtraImport": true,
        "detail": "langdetect",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ChatPermissions",
        "importPath": "hydrogram.types",
        "description": "hydrogram.types",
        "isExtraImport": true,
        "detail": "hydrogram.types",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "schedule",
        "importPath": "schedule",
        "description": "schedule",
        "isExtraImport": true,
        "detail": "schedule",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "CronTrigger",
        "importPath": "apscheduler.triggers.cron",
        "description": "apscheduler.triggers.cron",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.cron",
        "documentation": {}
    },
    {
        "label": "DB",
        "importPath": "plugins.ranking.model",
        "description": "plugins.ranking.model",
        "isExtraImport": true,
        "detail": "plugins.ranking.model",
        "documentation": {}
    },
    {
        "label": "prettier",
        "importPath": "plugins.dice.util",
        "description": "plugins.dice.util",
        "isExtraImport": true,
        "detail": "plugins.dice.util",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "plugins.dice.model",
        "description": "plugins.dice.model",
        "isExtraImport": true,
        "detail": "plugins.dice.model",
        "documentation": {}
    },
    {
        "label": "Model64",
        "importPath": "plugins.dice.model",
        "description": "plugins.dice.model",
        "isExtraImport": true,
        "detail": "plugins.dice.model",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "refresh_chat",
        "kind": 2,
        "importPath": "plugins.AI.google_ai",
        "description": "plugins.AI.google_ai",
        "peekOfCode": "def refresh_chat(c, m):\n    m.delete()\n    reset()\n    m.delete()\ndef photo_message(_, __, m):\n    return m.reply_to_message and m.reply_to_message.photo\n@Client.on_message(\n    (filters.mentioned | filters.private)\n    & (filters.photo | filters.create(photo_message))\n    & filters.incoming",
        "detail": "plugins.AI.google_ai",
        "documentation": {}
    },
    {
        "label": "photo_message",
        "kind": 2,
        "importPath": "plugins.AI.google_ai",
        "description": "plugins.AI.google_ai",
        "peekOfCode": "def photo_message(_, __, m):\n    return m.reply_to_message and m.reply_to_message.photo\n@Client.on_message(\n    (filters.mentioned | filters.private)\n    & (filters.photo | filters.create(photo_message))\n    & filters.incoming\n)\nasync def pro_vision_model(c, m):\n    await m.reply_chat_action(ChatAction.TYPING)\n    try:",
        "detail": "plugins.AI.google_ai",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "plugins.AI.pro",
        "description": "plugins.AI.pro",
        "peekOfCode": "def reset():\n    global chat\n    chat = model.start_chat(history=[])\n    chat.send_message(\"Từ bây giờ bạn sẽ có tên là Trần Khánh Hân\")\nreset()\ndef pro(text, user):\n    ask_text = f\"Tôi là {user}.\\n{text}\"\n    response = chat.send_message(ask_text)\n    return response.text",
        "detail": "plugins.AI.pro",
        "documentation": {}
    },
    {
        "label": "pro",
        "kind": 2,
        "importPath": "plugins.AI.pro",
        "description": "plugins.AI.pro",
        "peekOfCode": "def pro(text, user):\n    ask_text = f\"Tôi là {user}.\\n{text}\"\n    response = chat.send_message(ask_text)\n    return response.text",
        "detail": "plugins.AI.pro",
        "documentation": {}
    },
    {
        "label": "generation_config",
        "kind": 5,
        "importPath": "plugins.AI.pro",
        "description": "plugins.AI.pro",
        "peekOfCode": "generation_config = {\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"top_k\": 1,\n    \"max_output_tokens\": 4096,\n}\nsafety_settings = [\n    {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},",
        "detail": "plugins.AI.pro",
        "documentation": {}
    },
    {
        "label": "safety_settings",
        "kind": 5,
        "importPath": "plugins.AI.pro",
        "description": "plugins.AI.pro",
        "peekOfCode": "safety_settings = [\n    {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n]\nmodel = genai.GenerativeModel(\n    model_name=\"gemini-pro\",\n    generation_config=generation_config,\n    safety_settings=safety_settings,",
        "detail": "plugins.AI.pro",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "plugins.AI.pro",
        "description": "plugins.AI.pro",
        "peekOfCode": "model = genai.GenerativeModel(\n    model_name=\"gemini-pro\",\n    generation_config=generation_config,\n    safety_settings=safety_settings,\n)\nchat = None\ndef reset():\n    global chat\n    chat = model.start_chat(history=[])\n    chat.send_message(\"Từ bây giờ bạn sẽ có tên là Trần Khánh Hân\")",
        "detail": "plugins.AI.pro",
        "documentation": {}
    },
    {
        "label": "chat",
        "kind": 5,
        "importPath": "plugins.AI.pro",
        "description": "plugins.AI.pro",
        "peekOfCode": "chat = None\ndef reset():\n    global chat\n    chat = model.start_chat(history=[])\n    chat.send_message(\"Từ bây giờ bạn sẽ có tên là Trần Khánh Hân\")\nreset()\ndef pro(text, user):\n    ask_text = f\"Tôi là {user}.\\n{text}\"\n    response = chat.send_message(ask_text)\n    return response.text",
        "detail": "plugins.AI.pro",
        "documentation": {}
    },
    {
        "label": "pro_vision",
        "kind": 2,
        "importPath": "plugins.AI.pro_vision",
        "description": "plugins.AI.pro_vision",
        "peekOfCode": "def pro_vision(image, text):\n    image_set = {\"mime_type\": \"image/png\", \"data\": image.getvalue()}\n    prompt_parts = [\n        text + \"\\n\",\n        image_set,\n    ]\n    response = model.generate_content(prompt_parts)\n    return response.text",
        "detail": "plugins.AI.pro_vision",
        "documentation": {}
    },
    {
        "label": "generation_config",
        "kind": 5,
        "importPath": "plugins.AI.pro_vision",
        "description": "plugins.AI.pro_vision",
        "peekOfCode": "generation_config = {\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"top_k\": 32,\n    \"max_output_tokens\": 4096,\n}\nsafety_settings = [\n    {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},",
        "detail": "plugins.AI.pro_vision",
        "documentation": {}
    },
    {
        "label": "safety_settings",
        "kind": 5,
        "importPath": "plugins.AI.pro_vision",
        "description": "plugins.AI.pro_vision",
        "peekOfCode": "safety_settings = [\n    {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n    {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"threshold\": \"BLOCK_ONLY_HIGH\"},\n]\nmodel = genai.GenerativeModel(\n    model_name=\"gemini-pro-vision\",\n    generation_config=generation_config,\n    safety_settings=safety_settings,",
        "detail": "plugins.AI.pro_vision",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "plugins.AI.pro_vision",
        "description": "plugins.AI.pro_vision",
        "peekOfCode": "model = genai.GenerativeModel(\n    model_name=\"gemini-pro-vision\",\n    generation_config=generation_config,\n    safety_settings=safety_settings,\n)\ndef pro_vision(image, text):\n    image_set = {\"mime_type\": \"image/png\", \"data\": image.getvalue()}\n    prompt_parts = [\n        text + \"\\n\",\n        image_set,",
        "detail": "plugins.AI.pro_vision",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 2,
        "importPath": "plugins.AI.stable_diffusion",
        "description": "plugins.AI.stable_diffusion",
        "peekOfCode": "def diff(query):\n    response = requests.get(\n        \"https://diffusion.cloudlapse.workers.dev/\", params=dict(q=query)\n    )\n    return response\n@Client.on_message(filters.command(\"image\") & filters.incoming)\ndef image_generator(c, m):\n    if len(m.command) > 1:\n        m.reply_chat_action(ChatAction.TYPING)\n        prompt = m.text.split(m.command[0])[1]",
        "detail": "plugins.AI.stable_diffusion",
        "documentation": {}
    },
    {
        "label": "image_generator",
        "kind": 2,
        "importPath": "plugins.AI.stable_diffusion",
        "description": "plugins.AI.stable_diffusion",
        "peekOfCode": "def image_generator(c, m):\n    if len(m.command) > 1:\n        m.reply_chat_action(ChatAction.TYPING)\n        prompt = m.text.split(m.command[0])[1]\n        if detect(prompt) != \"en\":\n            query = translator.translate(prompt)\n        else:\n            query = prompt\n        response = diff(query)\n        m.reply_chat_action(ChatAction.UPLOAD_PHOTO)",
        "detail": "plugins.AI.stable_diffusion",
        "documentation": {}
    },
    {
        "label": "translator",
        "kind": 5,
        "importPath": "plugins.AI.stable_diffusion",
        "description": "plugins.AI.stable_diffusion",
        "peekOfCode": "translator = EasyGoogleTranslate(source_language=\"vi\", target_language=\"en\", timeout=30)\ndef diff(query):\n    response = requests.get(\n        \"https://diffusion.cloudlapse.workers.dev/\", params=dict(q=query)\n    )\n    return response\n@Client.on_message(filters.command(\"image\") & filters.incoming)\ndef image_generator(c, m):\n    if len(m.command) > 1:\n        m.reply_chat_action(ChatAction.TYPING)",
        "detail": "plugins.AI.stable_diffusion",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "plugins.admin.admin",
        "description": "plugins.admin.admin",
        "peekOfCode": "admin = os.getenv(\"ADMIN_ID\", \"5665225938\")\nif admin.isdigit():\n    if not admin.startswith(\"0\"):\n        admin = int(admin)",
        "detail": "plugins.admin.admin",
        "documentation": {}
    },
    {
        "label": "run_shell_bash",
        "kind": 2,
        "importPath": "plugins.admin.bash",
        "description": "plugins.admin.bash",
        "peekOfCode": "def run_shell_bash(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    command = m.text.replace(\"/bash \", \"\")\n    result = subprocess.run(\n        command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, shell=True\n    )\n    m.reply(f\"```bash\\n{result.stdout}\\n```\")",
        "detail": "plugins.admin.bash",
        "documentation": {}
    },
    {
        "label": "reset_program",
        "kind": 2,
        "importPath": "plugins.admin.reset",
        "description": "plugins.admin.reset",
        "peekOfCode": "def reset_program(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    md = m.reply(\"Đang khởi động lại chương trình Client...\")\n    with open(\"reset.txt\", \"w\") as f:\n        f.write(str(m.chat.id) + \":\" + str(md.id))\n    os.execl(sys.executable, sys.executable, *sys.argv)",
        "detail": "plugins.admin.reset",
        "documentation": {}
    },
    {
        "label": "update_server",
        "kind": 2,
        "importPath": "plugins.admin.update",
        "description": "plugins.admin.update",
        "peekOfCode": "def update_server(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    mp = m.reply(\"Đang cập nhật hệ thống...\")\n    os.system(\"git stash\")\n    os.system(\"git pull\")\n    md = m.reply(\"Đã cập nhật xong đang khởi động lại...\")\n    mp.delete()\n    with open(\"reset.txt\", \"w\") as f:\n        f.write(str(m.chat.id) + \":\" + str(md.id))\n    os.execl(sys.executable, sys.executable, *sys.argv)",
        "detail": "plugins.admin.update",
        "documentation": {}
    },
    {
        "label": "punish",
        "kind": 2,
        "importPath": "plugins.dice.dice",
        "description": "plugins.dice.dice",
        "peekOfCode": "def punish(m):\n    mtime = random.randint(1, 1000)\n    m.reply(\n        f\"**{m.from_user.first_name}** nhận được `{m.dice.value}` điểm, quá đen đủi cho ngày hôm nay. Hãy dành `{mtime}` phút cuộc đời để suy nghĩ về số phận.\",\n        quote=True,\n    )\n    now = datetime.now()\n    delta = timedelta(minutes=mtime)\n    targ = now + delta\n    m.chat.restrict_member(",
        "detail": "plugins.dice.dice",
        "documentation": {}
    },
    {
        "label": "already",
        "kind": 2,
        "importPath": "plugins.dice.dice",
        "description": "plugins.dice.dice",
        "peekOfCode": "def already(m, point):\n    temp = m.reply(\n        f\"**{m.from_user.first_name}**, hôm nay bạn đã thử vận may với cái này rồi, không thể thực hiện lại nữa, hãy chờ ngày mai hoặc thử cái khác.\\n\\nĐiểm của bạn là  **{point}**\",\n        quote=True,\n    )\n    m.delete()\n    time.sleep(10)\n    temp.delete()\ndef update(m, db, model):\n    db.update(",
        "detail": "plugins.dice.dice",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "plugins.dice.dice",
        "description": "plugins.dice.dice",
        "peekOfCode": "def update(m, db, model):\n    db.update(\n        m.from_user.id,\n        m.from_user.first_name,\n        m.from_user.last_name,\n        m.from_user.username,\n        m.dice.value,\n        model,\n    )\n@Client.on_message(filters.dice)",
        "detail": "plugins.dice.dice",
        "documentation": {}
    },
    {
        "label": "roll_dice",
        "kind": 2,
        "importPath": "plugins.dice.dice",
        "description": "plugins.dice.dice",
        "peekOfCode": "def roll_dice(c, m):\n    db = Database()\n    m.reply_chat_action(ChatAction.TYPING)\n    dice = m.dice\n    if dice.emoji == \"🎰\":\n        user = db.get(m.from_user.id, Model64)\n        if user:\n            return already(m, user.point)\n        update(m, db, Model64)\n        if dice.value > 59:",
        "detail": "plugins.dice.dice",
        "documentation": {}
    },
    {
        "label": "get_dice_rank",
        "kind": 2,
        "importPath": "plugins.dice.dice",
        "description": "plugins.dice.dice",
        "peekOfCode": "def get_dice_rank(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    db = Database()\n    rows = db.list(Model64)\n    users = []\n    for row in rows:\n        if row.last_name:\n            name = row.first_name + \" \" + row.last_name\n        else:\n            name = row.first_name",
        "detail": "plugins.dice.dice",
        "documentation": {}
    },
    {
        "label": "Model64",
        "kind": 6,
        "importPath": "plugins.dice.model",
        "description": "plugins.dice.model",
        "peekOfCode": "class Model64(Base):\n    __tablename__ = \"type64\"\n    user_id = Column(BigInteger, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String, nullable=True)\n    username = Column(String, nullable=True)\n    point = Column(BigInteger, default=0)\nclass Model6(Base):\n    __tablename__ = \"type6\"\n    user_id = Column(BigInteger, primary_key=True)",
        "detail": "plugins.dice.model",
        "documentation": {}
    },
    {
        "label": "Model6",
        "kind": 6,
        "importPath": "plugins.dice.model",
        "description": "plugins.dice.model",
        "peekOfCode": "class Model6(Base):\n    __tablename__ = \"type6\"\n    user_id = Column(BigInteger, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String, nullable=True)\n    username = Column(String, nullable=True)\n    point = Column(BigInteger, default=0)\nclass Model5(Base):\n    __tablename__ = \"type5\"\n    user_id = Column(BigInteger, primary_key=True)",
        "detail": "plugins.dice.model",
        "documentation": {}
    },
    {
        "label": "Model5",
        "kind": 6,
        "importPath": "plugins.dice.model",
        "description": "plugins.dice.model",
        "peekOfCode": "class Model5(Base):\n    __tablename__ = \"type5\"\n    user_id = Column(BigInteger, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String, nullable=True)\n    username = Column(String, nullable=True)\n    point = Column(BigInteger, default=0)\nclass Database:\n    def __init__(self):\n        self.engine = create_engine(neon_url)",
        "detail": "plugins.dice.model",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "plugins.dice.model",
        "description": "plugins.dice.model",
        "peekOfCode": "class Database:\n    def __init__(self):\n        self.engine = create_engine(neon_url)\n        Base.metadata.create_all(self.engine)\n        Session = sessionmaker(bind=self.engine)\n        self.session = Session()\n    def update(\n        self,\n        user_id: int,\n        first_name: str,",
        "detail": "plugins.dice.model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "plugins.dice.model",
        "description": "plugins.dice.model",
        "peekOfCode": "Base = declarative_base()\nclass Model64(Base):\n    __tablename__ = \"type64\"\n    user_id = Column(BigInteger, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String, nullable=True)\n    username = Column(String, nullable=True)\n    point = Column(BigInteger, default=0)\nclass Model6(Base):\n    __tablename__ = \"type6\"",
        "detail": "plugins.dice.model",
        "documentation": {}
    },
    {
        "label": "prettier",
        "kind": 2,
        "importPath": "plugins.dice.util",
        "description": "plugins.dice.util",
        "peekOfCode": "def prettier(user_rows):\n    ranks = []\n    emojis = [\"👑\", \"🍀\", \"☘️\"]\n    sorted_users = sorted(user_rows, key=lambda x: x[1], reverse=True)\n    for i, row in enumerate(sorted_users[:10]):\n        rank = f\"{emojis[i]}\" if i < len(emojis) else f\"{i + 1}\"\n        user_info = [\n            f\"<b>{rank}) {row[0]}</b>\",\n            f\"(`{row[1]}`)\",\n        ]",
        "detail": "plugins.dice.util",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "plugins.ranking.model",
        "description": "plugins.ranking.model",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"rank\"\n    user_id = Column(BigInteger, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String, nullable=True)\n    username = Column(String, nullable=True)\n    exp = Column(BigInteger, default=0)\nclass DailyUser(Base):\n    __tablename__ = \"dailyrank\"\n    user_id = Column(BigInteger, primary_key=True)",
        "detail": "plugins.ranking.model",
        "documentation": {}
    },
    {
        "label": "DailyUser",
        "kind": 6,
        "importPath": "plugins.ranking.model",
        "description": "plugins.ranking.model",
        "peekOfCode": "class DailyUser(Base):\n    __tablename__ = \"dailyrank\"\n    user_id = Column(BigInteger, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String, nullable=True)\n    username = Column(String, nullable=True)\n    exp = Column(BigInteger, default=0)\n    level = Column(BigInteger, default=0)\nclass DB:\n    def __init__(self):",
        "detail": "plugins.ranking.model",
        "documentation": {}
    },
    {
        "label": "DB",
        "kind": 6,
        "importPath": "plugins.ranking.model",
        "description": "plugins.ranking.model",
        "peekOfCode": "class DB:\n    def __init__(self):\n        self.engine = create_engine(neon_url)\n        Base.metadata.create_all(self.engine)\n        Session = sessionmaker(bind=self.engine)\n        self.session = Session()\n    def update(\n        self, user_id: int, first_name: str, last_name: str, username: str, exp: int\n    ):\n        user = self.session.query(User).filter_by(user_id=user_id).first()",
        "detail": "plugins.ranking.model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "plugins.ranking.model",
        "description": "plugins.ranking.model",
        "peekOfCode": "Base = declarative_base()\nclass User(Base):\n    __tablename__ = \"rank\"\n    user_id = Column(BigInteger, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String, nullable=True)\n    username = Column(String, nullable=True)\n    exp = Column(BigInteger, default=0)\nclass DailyUser(Base):\n    __tablename__ = \"dailyrank\"",
        "detail": "plugins.ranking.model",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 2,
        "importPath": "plugins.ranking.users_rank",
        "description": "plugins.ranking.users_rank",
        "peekOfCode": "def counter(c, m):\n    if m.from_user:\n        db = DB()\n        user_id = m.from_user.id\n        first_name = m.from_user.first_name\n        last_name = m.from_user.last_name\n        username = m.from_user.username\n        user = db.get(user_id)\n        if user:\n            level, _ = get_level(user.exp)",
        "detail": "plugins.ranking.users_rank",
        "documentation": {}
    },
    {
        "label": "get_rank",
        "kind": 2,
        "importPath": "plugins.ranking.users_rank",
        "description": "plugins.ranking.users_rank",
        "peekOfCode": "def get_rank(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    db = DB()\n    result_list = db.list()\n    users = []\n    for item in result_list:\n        if item.last_name:\n            name = item.first_name + \" \" + item.last_name\n        else:\n            name = item.first_name",
        "detail": "plugins.ranking.users_rank",
        "documentation": {}
    },
    {
        "label": "get_daily_rank",
        "kind": 2,
        "importPath": "plugins.ranking.users_rank",
        "description": "plugins.ranking.users_rank",
        "peekOfCode": "def get_daily_rank(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    db = DB()\n    result_list = db.daily_list()\n    users = []\n    for item in result_list:\n        if item.last_name:\n            name = item.first_name + \" \" + item.last_name\n        else:\n            name = item.first_name",
        "detail": "plugins.ranking.users_rank",
        "documentation": {}
    },
    {
        "label": "check_user_level",
        "kind": 2,
        "importPath": "plugins.ranking.users_rank",
        "description": "plugins.ranking.users_rank",
        "peekOfCode": "def check_user_level(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    db = DB()\n    if m.reply_to_message:\n        if m.reply_to_message.from_user:\n            user_id = m.reply_to_message.from_user.id\n    elif len(m.command) > 1:\n        username = m.command[1]\n        try:\n            user_id = c.get_users(username).id",
        "detail": "plugins.ranking.users_rank",
        "documentation": {}
    },
    {
        "label": "get_level",
        "kind": 2,
        "importPath": "plugins.ranking.util",
        "description": "plugins.ranking.util",
        "peekOfCode": "def get_level(exp):\n    level = 0\n    require_exp = 100\n    while exp >= require_exp:\n        exp -= require_exp\n        level += 1\n        if level % 2 == 0:\n            require_exp *= 1.2\n    remaining_exp_for_next_level = require_exp - exp\n    return level, round(remaining_exp_for_next_level)",
        "detail": "plugins.ranking.util",
        "documentation": {}
    },
    {
        "label": "ranks_prettier",
        "kind": 2,
        "importPath": "plugins.ranking.util",
        "description": "plugins.ranking.util",
        "peekOfCode": "def ranks_prettier(user_rows):\n    ranks = []\n    emojis = [\"🏆\", \"🏅\", \"🥇\", \"🥈\", \"🥉\"]\n    sorted_users = sorted(user_rows, key=lambda x: x[1], reverse=True)\n    for i, row in enumerate(sorted_users[:20]):\n        rank = f\"{emojis[i]}\" if i < len(emojis) else f\"{i + 1}\"\n        user_info = [\n            f\"<b>{rank}) {row[0]}</b>\",\n            f\"(Lv{row[2]})\",\n        ]",
        "detail": "plugins.ranking.util",
        "documentation": {}
    },
    {
        "label": "count_exp",
        "kind": 2,
        "importPath": "plugins.ranking.util",
        "description": "plugins.ranking.util",
        "peekOfCode": "def count_exp(m, level: int):\n    exp = 1\n    is_bonus = 0\n    if m.text:\n        exp = len(m.text)\n        if exp == 4096:\n            div = random.randint(1000, 9656)\n            div = ((div + level) * 10) + 4096\n            exp -= div\n            is_bonus = exp",
        "detail": "plugins.ranking.util",
        "documentation": {}
    },
    {
        "label": "get_user_rank",
        "kind": 2,
        "importPath": "plugins.ranking.util",
        "description": "plugins.ranking.util",
        "peekOfCode": "def get_user_rank(user_rows, target_user_id):\n    sorted_users = sorted(user_rows, key=lambda x: x[1], reverse=True)\n    for i, (user_id, _) in enumerate(sorted_users, start=1):\n        if user_id == target_user_id:\n            return i\n    return None\ndef get_title(level):\n    if level < 20:\n        return \"Gà Mờ\"\n    elif level < 40:",
        "detail": "plugins.ranking.util",
        "documentation": {}
    },
    {
        "label": "get_title",
        "kind": 2,
        "importPath": "plugins.ranking.util",
        "description": "plugins.ranking.util",
        "peekOfCode": "def get_title(level):\n    if level < 20:\n        return \"Gà Mờ\"\n    elif level < 40:\n        return \"Nghiệp Dư\"\n    elif level < 60:\n        return \"Thành Thạo\"\n    elif level < 80:\n        return \"Bán Chuyên\"\n    elif level < 101:",
        "detail": "plugins.ranking.util",
        "documentation": {}
    },
    {
        "label": "SECRET",
        "kind": 5,
        "importPath": "environment",
        "description": "environment",
        "peekOfCode": "SECRET = os.getenv(\"SECRET\")\nres = requests.get(SECRET).json()\ngoogle_api = res[\"key\"][\"google_ai\"]\nneon_url = res[\"data\"][\"neon\"]\napi_id = res[\"key\"][\"api_id\"]\napi_hash = res[\"key\"][\"api_hash\"]\nbot_token = res[\"bot\"][\"ai_tg\"]",
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "environment",
        "description": "environment",
        "peekOfCode": "res = requests.get(SECRET).json()\ngoogle_api = res[\"key\"][\"google_ai\"]\nneon_url = res[\"data\"][\"neon\"]\napi_id = res[\"key\"][\"api_id\"]\napi_hash = res[\"key\"][\"api_hash\"]\nbot_token = res[\"bot\"][\"ai_tg\"]",
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "google_api",
        "kind": 5,
        "importPath": "environment",
        "description": "environment",
        "peekOfCode": "google_api = res[\"key\"][\"google_ai\"]\nneon_url = res[\"data\"][\"neon\"]\napi_id = res[\"key\"][\"api_id\"]\napi_hash = res[\"key\"][\"api_hash\"]\nbot_token = res[\"bot\"][\"ai_tg\"]",
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "neon_url",
        "kind": 5,
        "importPath": "environment",
        "description": "environment",
        "peekOfCode": "neon_url = res[\"data\"][\"neon\"]\napi_id = res[\"key\"][\"api_id\"]\napi_hash = res[\"key\"][\"api_hash\"]\nbot_token = res[\"bot\"][\"ai_tg\"]",
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "api_id",
        "kind": 5,
        "importPath": "environment",
        "description": "environment",
        "peekOfCode": "api_id = res[\"key\"][\"api_id\"]\napi_hash = res[\"key\"][\"api_hash\"]\nbot_token = res[\"bot\"][\"ai_tg\"]",
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "api_hash",
        "kind": 5,
        "importPath": "environment",
        "description": "environment",
        "peekOfCode": "api_hash = res[\"key\"][\"api_hash\"]\nbot_token = res[\"bot\"][\"ai_tg\"]",
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "bot_token",
        "kind": 5,
        "importPath": "environment",
        "description": "environment",
        "peekOfCode": "bot_token = res[\"bot\"][\"ai_tg\"]",
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = Client(\n    \"Google AI\", api_id, api_hash, bot_token=bot_token, plugins=dict(root=\"plugins\")\n)\napp.start()\nschedule(app)\nidle()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "schedule",
        "kind": 2,
        "importPath": "schedule",
        "description": "schedule",
        "peekOfCode": "def schedule(c):\n    def dice_rank():\n        c.send_chat_action(\"share_v2ray_file\", ChatAction.TYPING)\n        db = Database()\n        result_list = db.list(Model64)\n        users = []\n        for item in result_list:\n            if item.last_name:\n                name = item.first_name + \" \" + item.last_name\n            else:",
        "detail": "schedule",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "def home():\n    return \"\"",
        "detail": "web",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef home():\n    return \"\"",
        "detail": "web",
        "documentation": {}
    }
]